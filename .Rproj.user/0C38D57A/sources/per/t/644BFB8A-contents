---
title: "airUpThere"
author: "Adam B. Smith"
date: "4/27/2021"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Introduction

## Getting started
```{r start}
library(airUpThere)
```
That's all!

## Explanation

The `airUpThere` package facilitates downloading and processing of popular raster-based climate data products like WorldClim and CHELSA. Each of the main functions in the package is prefixed by a 2-letter abbreviation specifying the data source. For example, `wcDownload` downloads WorldClim rasters and `tcDownload` downloads TerraClimate rasters.

Currently `airUpThere` supports these data sources:

* CHESA (prefix `ch`)
* PRISM (prefix `pr`)
* TerraClimate (prefix `tc`)
* WorldClim (prefix `wc`)

This R package meets several needs when obtaining and processing these climate raster sources:
* One-line invocation of *lots* of rasters that would take you a lot of time to download if you just clicked on each link.
* Creation of a standard, organized file structure for files
* Ability to stack or extract from user-specified subsets of rasters (e.g., all rasters representing minimum temperature from 1959 to 1969)
* Use of standardized variable names so you don't have to remember if a particular data sources uses, for example, `pr` or `ppt` to refer to precipitation rasters

Depending on the data source, several functions are available:

* Downloading: All
* Unpacking (i.e., unzipping, file conversion): Available for sources that don't provide rasters in formats readily-usable by GIS (e.g., in zip files)
* Creating user-defined raster stacks: For some sources
* Extracting values at points for user-defined stacks: For some sources

Of particular interest may be the `xxGet` functions, which are like a "one-size-fits-all" method for obtaining rasters on the fly. The `xxGet` functions download the specified rasters and unpack them if necessary, then import them into your current R session. The actual raster set is stored in a temporary location (which can be changed). These functions are useful for importing specific rasters for on-the-fly analysis.

For a complete list of functions, please see `?airUpThere`.

# Variable names

Although there are commonalities, the names of variables in files and in URLs can differ between and within data sources. For example, WorldClim version 1.4 historical rasters use "prec" for precipitation, while in future rasters this variable is called "pr", and WorldClim 2.1 uses "prec" again. To help users navigate the different variables, `airUpThere` uses a "standard" set of variable names, which can be obtained as such:

```{r variableNames}
data(varNames)
varNames
```
Here, "standard" names are in the left column while "file/URL" versions are in the remaining columns. **Note that in this table the definitions in the second column are general. Just because two variables from different (or the same) data source have the same standard name does not mean they're calculated the same.**  You will have to consult the actual data source to obtain definitions and units of each variable.

To maintain data consistency with online versions of files, files are actually saved on disk using the file/URL version of each variable. The "standard" names are simply used in the functions of this package. You can convert between standard and file/URL versions using like this:
```{r convertVar}
# convert file/URL names to standard versions for WorldClim 2.1
convertVar('wc', c('tmin', 'tmax', 'prec'), ver=2.1, period='historical', standardToFile=FALSE)

# convert standard names to file/URL versions for WorldClim 2.1
convertVar('wc', c('tmin', 'tmax', 'ppt'), ver=2.1, period='historical', standardToFile=TRUE)

# convert standard names to file/URL versions for TerraClimate
convertVar('tc', c('awd', 'elev', 'windSpeed'), ver=2.1, period='historical', standardToFile=TRUE)

# convert file/URL names to standard versions for TerraClimate
convertVar('tc', c('def', 'elevation', 'ws'), ver=2.1, period='historical', standardToFile=FALSE)
```

# Examples

## PRISM
The Parameter Regression on Independent Slopes Model ([PRISM](https://prism.oregonstate.edu/)) provides historical climate reconstructions at annual and monthly time scales (for free and subscription versions) and daily time scales (for subscription versions). To get a subscription version you will need to obtain a paid license from the PRISM staff.

The spatial resolution of PRISM depends on the version. The public version is at 1 arcmin scale, which is also called the "4-km" version. The subscription provides rasters at 30 arcsec resolution, which is also called the "800-m" version.  The variables that are available also depend on the version being used:

* minimum/maximum/mean temperature (public, subscription)
* precipitation (public, subscription)
* mean dew point temperature (subscription)
* minimum/maximum vapor pressure deficit (subscription)

You can get a list of available PRISM variables using:
```{r prVars}
prVars('public', standard=TRUE, defs=TRUE)
```

The time periods also vary by version, and their explication is beyond this vignette.  However, in general, the public version covers 1895 at monthly time scales to the present, and the subscription versions cover annual and monthly values extending back to 1895 or 1981, and daily values extending back to 1981.

```{r prDownload, eval=FALSE}
prZipDir <- paste0(getwd(), '/prism_zipped') # save to this folder
prUnzipDir <- paste0(getwd(), '/prism_unzipped') # unzip here

# download public version of minimum temperature for 1971
ok <- prDownload(prZipDir, vars='tmin', year=1971)

# unzip public version of minimum temperature for 1971
ok <- prUnpack(prZipDir, prUnzipDir, 'tmin', year=1971)
```

**NOTE** Downloading of the public version of PRISM can be abused very easily. In fact, if you try to download the same raster within about a 24-hour time span, you will get a stern message, and your IP address might become blocked!

The `prExtract` family of functions are particularly useful for extracting values at point locations. The `prExtractAbsolute` functions extract values for a user-specified date range. For example, suppose you have a data frame with "start" and "end" dates for a time period across which you would like to extract weather variables.
```{r prExtractAbsoluteData, eval=FALSE}
x <- data.frame(
	long=rep(-97.66, 3),
	lat=rep(38.37, 3),
	startDate=c('2014-04-22', '2014-06-01', '2014-05-22'),
	endDate=c('2014-04-22', '2014-08-01', '2015-05-22')
)

x
```
In this example we have a site for which we will extract all available monthly values from April 2014 (1st row), April through August of 2014 (second row), and from May 2014 through May of 2015 (third row).

```{r prExtractAbsolute, eval=FALSE}
absol <- prExtractAbsoluteMonthly(
	x,
	startDate='startDate',
	endDate='endDate',
	longLat=c('long', 'lat'),
	prDir=prUnzipDir,
	vars='tmin',
	res=4,
	rastSuffix='tif'
)

absol
```
If particular rasters do not exist within the data that you have downloaded, they are filled with `NA` values.

If you would want to download values for the year/month/day of a particular record (i.e., not over a time span), the set the start date equal to the end date:

```{r prExtractAbsoluteSameDate, eval=FALSE}
absol2 <- prExtractAbsoluteMonthly(
	x,
	startDate='startDate',
	endDate='startDate', # same as start date
	longLat=c('long', 'lat'),
	prDir=prUnzipDir,
	vars='tmin',
	res=4,
	rastSuffix='tif'
)

absol2
```

The `prExtractRelative` functions extract annual, monthly, or daily values across a temporal window prior to a given date. For example, you could extract all monthly values up to 5 months prior to a given date.
```{r prExtractRelativeData}
x <- data.frame(
	long=rep(-97.66, 5),
	lat=rep(38.37, 5),
	date=c('2015-12-31', '1981-01-05', '2020-12-01')
)

x
```

Here, we wish to extract all monthly data from July through December of 2015 (first row), August of 1980 through January of 1981 (second row), and July through December of 2020 (third row).

```{r prExtractRelative}
rel <- prExtractRelativeMonthly(
	x,
	date = 'date',
	longLat = c('long', 'lat'),
	prDir = prUnzipDir,
	vars = 'tmin',
	res = 4,
	rastSuffix = 'tif',
	windowYears = 0,
	windowMonths = 5
)

rel
```

If particular rasters do not exist within the data that you have downloaded, they are filled with `NA` values. If you want to get just the annual/monthly/daily data for just one year/month/day, set all of the `window` arguments equal to 0.

## TerraClimate
TerraClimate provides historical climate reconstructions for the coterminous United States (CONUS) at 1-arcmin (~1600-m) resolution on monthly time scales from 1958 to the roughly the year prior to the one in which you're reading this. You can get a list of available TerraClimate variables using:
```{r tcVars}
tcVars(defs=TRUE)
```

Downloading TerraClimate variables can be done in one line:

```{r terraClimateDownload, eval=FALSE}
tcDir <- paste0(getwd(), '/tc') # save to this folder
tcDownload(tcDir, vars='tmin', year=1958:1959)
```

TerraClimate rasters are saved in NetCDF format, which can be managed by functions in the `terra` package. In some cases, it can be useful to get a stack of select rasters using the `tcStack` function:
```{r tcStack, eval=FALSE}
tc <- tcStack(tcDir, vars='tmin', years=1958:1959)
plot(tc)
```

## WorldClim
WorldClim represents present and future climate scenarios at several different spatial resolutions (10 arcmin to 30 arcsec). At present, there are two versions of WorldClim, version 1.4 and 2.1. The `wc` functions handle both of these; you simply need to specify the version number.

Depending on the version, different variables, time periods, and resolutions are available, so each of these must be specified. You can get a list of available WorldClim variables for each combination of version and time period using:
```{r tcVars}
# version 1.4 historical
wcVars(ver=1.4, period='historical', defs=TRUE)
wcVars(ver=1.4, period='future', defs=TRUE)

# version 2.1 historical
wcVars(ver=2.1, period='historical', defs=TRUE)
wcVars(ver=2.1, period='future', defs=TRUE)
wcVars(ver=2.1, period='decadal', defs=TRUE)
```


To speed the example, we'll just download one variable (minimum temperature, `tmin`) at 10 arcminutes resolution.

```{r worldClimHist, evan=FALSE}
# download and unzip version 1.4 historical (near-present)
saveTo1.4 <- paste0(getwd(), '/wc_1.4_zipped')
unzipTo1.4 <- paste0(getwd(), '/wc_1.4_unzipped')
wcDownloadHist(saveTo1.4, ver=1.4, res=10, vars='tmin')
wcUnpackHist(saveTo1.4, unzipTo1.4, ver=1.4, res=10, vars='tmin')

# version 2.1 historical (near-present)
saveTo2.1 <- paste0(getwd(), '/wc_2.1_zipped')
unzipTo2.1 <- paste0(getwd(), '/wc_2.1_unzipped')
wcDownloadHist(saveTo2.1, ver=2.1, res=10, vars='tmin')
wcUnpackHist(saveTo2.1, unzipTo2.1, ver=2.1, res=10, vars='tmin')
```

You can also download future climate predictions projected by different climate models:
```{r worldClimFut, eval=FALSE}
# download and unzip version 1.4 future (near-present)
# for earth system model BCC-CSM1-1 under RCP6.0 for the 2050s
wcDownloadFut(saveTo1.4, ver=1.4, res=10, vars='tmin', esm='bc', ghg=60, period=2050)
wcUnpackFut(saveTo1.4, unzipTo1.4, ver=1.4, res=10, vars='tmin', esm='bc', ghg=60, period=2050)

# download and unzip version 2.1 future (near-present)
# for earth system model BCC-CSM2-MR under SSP370 for the 2050s
wcDownloadFut(saveTo2.1, ver=2.1, res=10, vars='tmin', esm='bc', ghg=370, period=2050)
wcUnpackFut(saveTo2.1, unzipTo2.1, ver=2.1, res=10, vars='tmin', esm='bc', ghg=370, period=2050)
```

Not all variables and time periods are available for every earth system model (ESM). You can find a full list of avalable ESMs using:
```{r wcEsm}
wcEsm(ver=1.4)
wcEsm(ver=2.1)
```

You can spell out each model (e.g., `BCC-CSM1-1`) or use a two-letter abbreviation (e.g., `BC` or `bc`). WorldClim 1.4 provided rescaled projection from CMIP5, and WorldClim 2.1 from CMIP6.

Some other `wc` functions of note:
* `wcDownloadDecadal` and `wcUnpackDecadal` for decadal values
* `wcDownloadElev` and `wcUpnackElev` for elevation

Note that functionality of the `wc` functions is somewhat replicated in the `dismo` package's `getData` function.
